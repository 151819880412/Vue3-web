/*
    tsconfig.json是ts编译器的配置文件，ts可以根据它的信息来对待吗进行编译 可以再tsconfig中写注释
    include : 用来指定哪些文件需要被编译
    exclude : 用来指定哪些文件不需要被编译 ：默认node_module
    extends : 用来指定继承的配置文件
    files   : 用来指定被编译的文件列表，只有编译少量文件才使用
    compilerOptions : 编译器的选项是配置文件中非常重要也是非常复杂的配置选项
*/
{
  "compilerOptions": {
    // 允许在类字段上使用 ECMAScript 2022 的提案中的 public, private, 和 protected 修饰符。
    "useDefineForClassFields": true,
    // 编译过程中，将辅助函数提取到单独的模块中，以减少重复生成代码的大小。
    "importHelpers": true,
    // 声明需要引入的类型声明文件，这里指定了 webpack-env 类型，用于支持在 TypeScript 中使用 Webpack 相关的全局变量和类型。
    "types": ["webpack-env"],
    // 指定模块解析策略为 Node.js 风格的模块解析，即按照 Node.js 的模块解析规则查找模块。
    "moduleResolution": "node",
    // 强制要求所有文件名的大小写使用一致的方式，避免文件引用时因大小写不一致而出现问题。
    "forceConsistentCasingInFileNames": true,
    // 允许从没有默认导出的模块中进行默认导入。
    "allowSyntheticDefaultImports": true,
    // 指定 JSX 语法的处理方式，此处设置为 preserve 保留 JSX 代码不进行转换。
    "jsx": "preserve",
    // 允许以更简洁的方式处理导入和导出，默认为 false，设置为 true 后可以使用更简单的导入语法。
    "esModuleInterop": true,
    // 允许导入 JSON 文件并在编译时将其作为模块处理。
    "resolveJsonModule": true,
    // 启用实验性的装饰器特性，使得可以使用装饰器语法来扩展类和类成员。
    "experimentalDecorators": true,
    // 指定编译时可用的库文件，这里指定了 dom 和 esnext，允许在代码中使用与 DOM 相关的类型和 ECMAScript 最新特性。
    "lib": ["dom", "esnext"],

    "skipLibCheck": true, //跳过检查库的代码
    // "experimentalDecorators": true,
    "baseUrl": "./",
    "paths": {
      // "*":["./node_modules/@types", "./types/*"],
      "@/*": ["src/*"],
      "#/*": ["types/*"]
    },
    // 用来指定 ES 版本 ESNext : 最新版。 'ES3', 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ESNext'
    "target": "esnext",
    // 指定要使用模块化的规范 : 'None', 'CommonJS', 'AMD', 'System', 'UMD', 'ES6'/'ES2015', 'ES2020' or 'ESNext'
    "module": "esnext",
    // 用来指定项目中要使用的库 'ES5', 'ES6', 'ES2015', 'ES7', 'ES2016', 'ES2017', 'ES2018', 'ESNext', 'DOM', 'DOM.Iterable',
    //                          'WebWorker', 'ScriptHost', 'ES2015.Core', 'ES2015.Collection', 'ES2015.Generator', 'ES2015.Iterable',
    //                          'ES2015.Promise', 'ES2015.Proxy', 'ES2015.Reflect', 'ES2015.Symbol', 'ES2015.Symbol.WellKnown',
    //                          'ES2016.Array.Include', 'ES2017.object', 'ES2017.Intl', 'ES2017.SharedMemory', 'ES2017.String',
    //                          'ES2017.TypedArrays', 'ES2018.Intl', 'ES2018.Promise', 'ES2018.RegExp', 'ESNext.AsyncIterable',
    //                          'ESNext.Array', 'ESNext.Intl', 'ESNext.Symbol'
    // 运行在浏览器中不用设置，运行在node或其他中才需要设置
    // "lib":[]，
    // 用来指定编译后文件的存放位置
    "outDir": "./dist",
    // 将代码合并为一个文件,设置之后所有的全局作用域中的代码会合并到同一个文件中 但是只能在  'amd' and 'system' 中才能使用
    // "outFile": "./dist/app.js",
    // 是否对js文件进行编译，默认false
    "allowJs": true,
    // 是否检查js代码是否符合语法规范，默认false
    "checkJs": false,
    // 是否移除注释，默认false
    "removeComments": false,
    // 是否不生成编译后文件，默认false
    "noEmit": false,
    // 当有错误时是否生成文件，默认false
    "noEmitOnError": false,
    // 是否生成sourceMap，默认false  这个文件里保存的，是转换后代码的位置，和对应的转换前的位置。有了它，出错的时候，通过断点工具可以直接显示原始代码，而不是转换后的代码。
    "sourceMap": true,

    // 所有的严格检查的总开关，默认false
    "strict": true,
    // 编译后的文件是否开启严格模式，默认false
    "alwaysStrict": true,
    // 不允许隐式的any，默认false(允许)
    "noImplicitAny": false,
    // 不允许隐式的this，默认false(允许) js/ts 混用时设为false
    "noImplicitThis": true,
    // 是否严格的检查空值，默认false 检查有可能为null的地方
    "strictNullChecks": true,
    // 是否严格检查bind、call和apply的参数列表，默认false  检查是否有多余参数
    "strictBindCallApply": true,
    // 是否严格检查函数的类型，
    "strictFunctionTypes": true,
    // 是否严格检查属性是否初始化，默认false
    "strictPropertyInitialization": true,

    // 是否检查switch语句包含正确的break，默认false
    "noFallthroughCasesInSwitch": true,
    // 检查函数没有隐式的返回值，默认false
    "noImplicitReturns": true,
    // 是否检查检查未使用的局部变量，默认false
    "noUnusedLocals": true,
    // 是否检查未使用的参数，默认false
    "noUnusedParameters": true,

    // 是否检查不可达代码报错，默认false   true，忽略不可达代码 false，不可达代码将引起错误
    "allowUnreachableCode": false
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx",
    "src/**/*.d.ts",
    "types/**/*.d.ts",
    "types/**/*.ts",
    "build/**/*.ts",
    "build/**/*.d.ts",
    "mock/**/*.ts",
    "vite.config.ts",
    "src",
    "types/*.d.ts",
    "src/@types/*.d.ts",
  ],
  "exclude": ["node_modules", "tests/server/**/*.ts", "dist", "**/*.js"],
}
// 最全配置
// https://www.tslang.cn/docs/handbook/compiler-options.html