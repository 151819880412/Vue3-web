/**




<template>
  <div>
    <el-button @click="submit">提交</el-button>
    <el-form :model="formData" :rules="rules" ref="form" style="padding:40px">
      <el-form-item v-for="item in formItems" :key="item.prop" v-bind="item">
        <component :is="item.component" v-model="formData[item.prop]" v-bind="item" v-on="item">
          <template v-if="item.slots" v-slot:[item.slots.slotName]="slotProp">
            <span>{{ slotProp?.data?.label }}</span>
            <div v-html="item.slots.slotHtml"></div>
            <div v-if="item.slots.component">
              <component v-for="item2 in item.slots.options" :key="item2.value" :is='item.slots.component'
                v-bind="{ ...item.slots, ...item2 }">{{ item2.showLabel || item2.label }}</component>
            </div>
          </template>
        </component>
      </el-form-item>
    </el-form>

  </div>
</template>

<script lang="ts">
  import {
    defineComponent,
    reactive,
    ref
  } from 'vue';
  import {
    ElInput,
    ElRadio,
    ElCheckbox,
    ElSelect,
    ElSlider,
    ElSwitch,
    ElTimePicker,
    ElDatePicker,
    ElRate,
    ElUpload,
    ElColorPicker,
    ElCascader,
    ElTransfer,
    ElForm,
    ElFormItem,
    ElButton,
    // FormItemProps,
    ElOption,
    ElRadioGroup,
    ElCheckboxGroup,
    ElInputNumber,
    ElImage,
    ElAutocomplete,
    ElTimeSelect,
    TimePickPanel,
  } from 'element-plus';
  import {
    CEInput
  } from '@/@types/CEForm/CEInput';
  import {
    CEInputNumber
  } from '@/@types/CEForm/CEInputNumber';
  import {
    CESelect
  } from '@/@types/CEForm/CESelect';
  import {
    CEOption
  } from '@/@types/CEForm/CEOption';
  import {
    CECascader
  } from '@/@types/CEForm/CECascader';
  import {
    CERadioGroup
  } from '@/@types/CEForm/CERadioGroup';
  import {
    CERadio
  } from '@/@types/CEForm/CERadio';
  import {
    CECheckboxGroup
  } from '@/@types/CEForm/CECheckboxGroup';
  import {
    CECheckbox
  } from '@/@types/CEForm/CECheckbox';
import { CESlider } from '@/@types/CEForm/CESlider';
import { CESwitch } from '@/@types/CEForm/CESwitch';
import { CEDateTimePicker } from '@/@types/CEForm/CEDateTimePicker';
import { CERate } from '@/@types/CEForm/CERate';
import { CEColorPicker } from '@/@types/CEForm/CEColorPicker';
import { CEUpload } from '@/@types/CEForm/CEUpload';
import { CETransfer } from '@/@types/CEForm/CETransfer';
import { CEForm } from '@/@types/CEForm/CEForm';
import { CEFormItem } from '@/@types/CEForm/CEFormItem';
import { CEFormImage } from '@/@types/CEForm/CEImage';


  export default defineComponent({
    components: {
      ElInput,
      ElRadio,
      ElCheckbox,
      ElSelect,
      ElSlider,
      ElSwitch,
      ElTimePicker,
      ElDatePicker,
      ElRate,
      ElUpload,
      ElColorPicker,
      ElCascader,
      ElTransfer,
      ElForm,
      ElFormItem,
      ElButton,
      ElOption,
      ElRadioGroup,
      ElCheckboxGroup,
      ElInputNumber,
      ElImage,
      ElAutocomplete,
      ElTimeSelect,
      TimePickPanel,
    },
    setup() {
      const form = ref();

      const submit = () => {
        console.log(formData);
        form.value.validate((valid: boolean) => {
          console.log(valid);
        });
      };

      const formItems = ref < any[] > ([
        new CEInput({
          label: 'Input1',
          prop: 'input1',
          component: 'el-input',
          placeholder: '请输入内容',
          disabled: false,
          clearable: true,
          readonly: false,
          autofocus: false,
          name: 'inputName',
          rules: [{
            required: true,
            message: '请输入内容',
            trigger: 'blur'
          }],
          resize: 'none',
          slots: {
            slotName: "prepend",
            slotHtml: "<span>111</span>"
          },
          type: "text"
        }),
        new CEInput({
          label: 'Textarea',
          prop: 'textarea',
          component: 'el-input',
          placeholder: '请输入内容',
          disabled: false,
          clearable: true,
          readonly: false,
          autofocus: false,
          name: 'inputName',
          rules: [{
            required: true,
            message: '请输入内容',
            trigger: 'blur'
          }],
          type: "textarea"
        }),
        new CEInput({
          label: 'Password',
          prop: 'password',
          component: 'el-input',
          placeholder: '请输入内容',
          disabled: false,
          clearable: true,
          readonly: false,
          autofocus: true,
          name: 'inputName',
          showPassword: true,
          rules: [{
            required: true,
            message: '请输入内容',
            trigger: 'blur'
          }],
          resize: 'none',
          type: "text"
        }),
        new CEInputNumber({
          label: 'Input Number',
          prop: 'inputNumber',
          component: 'el-input-number',
          // width: 100,
          // value: 1,
          // size: 1,
          min: 0,
          max: 100,
          step: 1,
          stepStrictly: false,
          // precision: '',
          disabled: false,
          controls: true,
          controlsPosition: '',
          name: 'inputNumber',
          // change: (val: number) => console.log('input number changed to: ', val),
          // focus: () => console.log('input number focused'),
          // blur: () => console.log('input number blurred'),
          validateEvent: true,
          rules: [{
            required: true,
            message: 'Please enter a number',
            trigger: 'change'
          }, ],
        }),



        new CESelect({
          label: 'Select',
          prop: 'select',
          component: 'el-select',
          placeholder: '请选择',
          multiple: false,
          disabled: false,
          clearable: false,
          collapseTags: false,
          multipleLimit: 0,
          remote: false,
          filterable: false,
          remoteMethod: undefined,
          loading: false,
          loadingText: '加载中',
          noMatchText: '无匹配数据',
          noDataText: '暂无数据',
          popperClass: '',
          reserveKeyword: false,
          defaultFirstOption: false,
          size: 'default',
          // prefixIcon: '',
          // suffixIcon: '',
          // onChange: (val: string | string[]) => console.log('select changed to: ', val),
          // onFocus: () => console.log('select focused'),
          // onBlur: () => console.log('select blurred'),
          name: 'select',
          validateEvent: true,
          rules: [{
            required: true,
            message: '请选择一个选项',
            trigger: 'change'
          }, ],
          slots: new CEOption({
            slotName: "default",
            component: 'el-option',
            options: [{
                label: '选项1',
                value: 'option1'
              },
              {
                label: '选项2',
                value: 'option2'
              },
              {
                label: '选项3',
                value: 'option3'
              },
            ],
          }),
          filterMethod: (query: string, option: any) => {
            return option.label.indexOf(query) !== -1;
          },
        }),
        // {
        //   label: 'Option',
        //   prop: 'option',
        //   component: 'el-option',
        //   width: 100,
        //   value: '',
        //   disabled: false,
        //   selected: false,
        //   onClick: () => console.log('option clicked'),
        //   onFocus: () => console.log('option focused'),
        //   onBlur: () => console.log('option blurred'),
        //   name: 'option',
        //   options: [
        //     { label: '选项1', value: 'option1' },
        //     { label: '选项2', value: 'option2' },
        //     { label: '选项3', value: 'option3' },
        //   ],
        // },
        new CECascader({
          label: 'Cascader',
          prop: 'cascader',
          component: 'el-cascader',
          // width: 150,
          slots: {
            slotName: 'default',
          },
          options: [{
            value: 'zhinan',
            label: '指南',
            children: [{
              value: 'shejiyuanze',
              label: '设计原则',
              children: [{
                  value: 'yizhi',
                  label: '一致'
                },
                {
                  value: 'fankui',
                  label: '反馈'
                },
                {
                  value: 'xiaolv',
                  label: '效率'
                },
                {
                  value: 'kekong',
                  label: '可控'
                }
              ]
            }]
          }],
          props: {
            value: 'value',
            label: 'label',
            children: 'children'
          },
          value: '',
          size: '',
          placeholder: '请选择',
          disabled: undefined,
          clearable: true,
          // changeOnSelect: false,
          filterable: false,
          separator: '/',
          // beforeFilter: (queryString: string, options: any[]) => {
          //   console.log('before filter');
          //   return options.filter(option => option.label.toLowerCase().includes(queryString.toLowerCase()));
          // },
          // onChange: (val: string[]) => console.log('cascader changed to: ', val),
          // onFocus: () => console.log('cascader focused'),
          // onBlur: () => console.log('cascader blurred'),
          name: 'cascader',
          validateEvent: true,
          rules: [{
            required: true,
            message: 'Please select an option',
            trigger: 'change'
          }, ],
        }),
        new CERadioGroup({
          label: 'Radio Group',
          prop: 'radioGroup',
          component: 'el-radio-group',
          // value: '选项2',
          size: '',
          fill: '#20A0FF',
          textColor: '',
          disabled: false,
          // border: false,
          // onChange: (val: string) => console.log('radio group changed to: ', val),
          // onFocus: () => console.log('radio group focused'),
          // onBlur: () => console.log('radio group blurred'),
          name: 'radioGroup',
          validateEvent: true,
          rules: [{
            required: true,
            message: 'Please select an option',
            trigger: 'change'
          }, ],
          slots: new CERadio({
            slotName: "default",
            label: 'Radio',
            prop: 'radio',
            component: 'el-radio',
            options: [{
                showLabel: '选项1',
                label: 'option1'
              },
              {
                showLabel: '选项2',
                label: 'option2'
              },
              {
                showLabel: '选项3',
                label: 'option3'
              },
            ],
            // defaultValue: '选项2',
            disabled: false,
            size: 'default',
            // textColor: '#ffffff',
            // fill: '#409EFF',
            // borderColor: '#409EFF',
            // onChange: (val: string) => console.log('radio changed to: ', val),
            // onFocus: () => console.log('radio focused'),
            // onBlur: () => console.log('radio blurred'),
            name: 'radio-group',
            // validateEvent: true,
            rules: [{
              required: true,
              message: '请选择一个选项',
              trigger: 'change'
            }, ],
          }),
        }),
        // {
        //   label: 'Radio',
        //   prop: 'radio',
        //   component: 'el-radio',
        //   options: [
        //     { label: '选项1', value: 'option1' },
        //     { label: '选项2', value: 'option2' },
        //     { label: '选项3', value: 'option3' },
        //   ],
        //   defaultValue: 'option1',
        //   disabled: false,
        //   size: 'medium',
        //   textColor: '#ffffff',
        //   fill: '#409EFF',
        //   borderColor: '#409EFF',
        //   onChange: (val: string) => console.log('radio changed to: ', val),
        //   onFocus: () => console.log('radio focused'),
        //   onBlur: () => console.log('radio blurred'),
        //   name: 'radio-group',
        //   validateEvent: true,
        //   rules: [
        //     { required: true, message: '请选择一个选项', trigger: 'change' },
        //   ],
        // },
        new CECheckboxGroup({
          label: 'Checkbox Group',
          prop: 'checkboxGroup',
          component: 'el-checkbox-group',
          size: '',
          // fill: '#20A0FF',
          // textColor: '',
          disabled: false,
          border: false,
          rules: [{
            required: true,
            message: '请勾选',
            trigger: 'change'
          }, ],
          required: true,
          slots: new CECheckbox({
            slotName: "default",
            label: 'Checkbox',
            prop: 'checkbox',
            component: 'el-checkbox',
            // trueLabel: '选中时的值',
            // falseLabel: '未选中时的值',
            checked: false,
            disabled: false,
            size: 'default',
            border: false,
            indeterminate: false,
            // onChange: (val: boolean) => console.log('checkbox changed to: ', val),
            // onFocus: () => console.log('checkbox focused'),
            // onBlur: () => console.log('checkbox blurred'),
            name: 'checkbox-group',
            validateEvent: true,
            rules: [{
              required: true,
              message: '请勾选',
              trigger: 'change'
            }, ],
            options: [{
                showLabel: '选项1',
                label: 'option1'
              },
              {
                showLabel: '选项2',
                label: 'option2'
              },
              {
                showLabel: '选项3',
                label: 'option3'
              },
            ],
          })
        }),
        // {
        //   label: 'Checkbox',
        //   prop: 'checkbox',
        //   component: 'el-checkbox',
        //   trueLabel: '选中时的值',
        //   falseLabel: '未选中时的值',
        //   checked: false,
        //   disabled: false,
        //   size: 'medium',
        //   border: false,
        //   indeterminate: false,
        //   onChange: (val: boolean) => console.log('checkbox changed to: ', val),
        //   onFocus: () => console.log('checkbox focused'),
        //   onBlur: () => console.log('checkbox blurred'),
        //   name: 'checkbox-group',
        //   validateEvent: true,
        //   rules: [
        //     { required: true, message: '请勾选', trigger: 'change' },
        //   ],
        // },
        new CESlider({
          label: 'Slider',
          prop: 'slider',
          component: 'el-slider',
          min: 0,
          max: 100,
          step: 1,
          disabled: false,
          showInput: false,
          showInputControls: true,
          inputSize: 'small',
          showStops: false,
          showTooltip: true,
          formatTooltip: (val: number) => val.toString(),
          range: false,
          vertical: false,
          height: '',
          // onChange: (val: number | number[]) => console.log('slider changed to: ', val),
          // onFocus: () => console.log('slider focused'),
          // onBlur: () => console.log('slider blurred'),
          name: 'slider',
          validateEvent: true,
          rules: [{
            required: true,
            message: '请滑动选择一个值',
            trigger: 'change'
          }, ],
        }),
        new CESwitch({
          label: 'Switch',
          prop: 'switch',
          component: 'el-switch',
          // activeIconClass: '',
          // inactiveIconClass: '',
          activeText: '',
          inactiveText: '',
          activeColor: '#409EFF',
          inactiveColor: '#C0CCDA',
          activeValue: true,
          inactiveValue: false,
          disabled: false,
          // onChange: (val: boolean) => console.log('switch changed to: ', val),
          // onFocus: () => console.log('switch focused'),
          // onBlur: () => console.log('switch blurred'),
          name: 'switch',
          validateEvent: true,
          rules: [{
            required: true,
            message: '请切换开关',
            trigger: 'change'
          }, ],
        }),
        new CEDateTimePicker({
          label: 'Time Picker',
          prop: 'timePicker',
          component: 'el-date-picker',
          type: "datetime",
          placeholder: 'Select time',
          readonly: false,
          editable: true,
          disabled: false,
          clearable: true,
          size: 'default',
          popperClass: '',
          startPlaceholder: '',
          endPlaceholder: '',
          isRange: false,
          arrowControl: true,
          format: 'YYYY-MM-DD HH:mm:ss',
          valueFormat: 'YYYY-MM-DD HH:mm:ss',
          // pickerOptions: {
          //   selectableRange: '00:00:00-23:59:59',
          //   format: 'HH:mm:ss',
          //   start: '09:00:00',
          //   step: '00:15:00',
          //   end: '18:00:00'
          // },
          // onChange: (val: string | string[]) => console.log('time changed to: ', val),
          // onFocus: () => console.log('time focused'),
          // onBlur: () => console.log('time blurred'),
          name: 'timePicker',
          validateEvent: true,
          rules: [{
            required: true,
            message: 'Please select a time',
            trigger: 'change'
          }, ],
        }),
        new CEDateTimePicker({
          label: 'Date Picker',
          prop: 'datePicker',
          component: 'el-date-picker',
          placeholder: 'Select date',
          type: "datetimerange",
          readonly: false,
          editable: true,
          disabled: false,
          clearable: true,
          size: 'default',
          popperClass: '',
          valueFormat: 'YYYY-MM-DD HH:mm:ss',
          format: 'YYYY-MM-DD HH:mm:ss',
          shortcuts: [{
              text: 'Today',
              onClick: () => console.log('Today clicked')
            },
            {
              text: 'Yesterday',
              onClick: () => console.log('Yesterday clicked')
            },
            {
              text: 'Last week',
              onClick: () => console.log('Last week clicked')
            }
          ],
          // onChange: (val: string | string[]) => console.log('date changed to: ', val),
          // onFocus: () => console.log('date focused'),
          // onBlur: () => console.log('date blurred'),
          name: 'datePicker',
          validateEvent: true,
          rules: [{
            required: true,
            message: 'Please select a date',
            trigger: 'change'
          }, ],
        }),
        new CERate({
          label: 'Rate',
          prop: 'rate',
          component: 'el-rate',
          colors: ['#99A9BF', '#F7BA2A', '#FF9900'],
          voidColor: '#C6D1DE',
          disabledVoidColor: '#EFF2F7',
          // iconClasses: ['el-icon-star-on', 'el-icon-star-on', 'el-icon-star-on'],
          // voidIconClass: 'el-icon-star-off',
          // disabledVoidIconClass: 'el-icon-star-on',
          // voidTextColor: '#C6D1DE',
          allowHalf: false,
          showText: false,
          showScore: false,
          scoreTemplate: '{value}',
          texts: ['Very Bad', 'Bad', 'Normal', 'Good', 'Very Good'],
          textColor: '#1F2D3D',
          disabled: false,
          max: 5,
          // onChange: (val: number) => console.log('rate changed to: ', val),
          // onFocus: () => console.log('rate focused'),
          // onBlur: () => console.log('rate blurred'),
          name: 'rate',
          // validateEvent: true,
          rules: [{
            required: true,
            message: 'Please rate this',
            trigger: 'change'
          }, ],
        }),
        new CEColorPicker({
          label: 'Color Picker',
          prop: 'colorPicker',
          component: 'el-color-picker',
          disabled: false,
          showAlpha: false,
          colorFormat: 'hex',
          // onChange: (val: string) => console.log('color changed to: ', val),
          // onFocus: () => console.log('color picker focused'),
          // onBlur: () => console.log('color picker blurred'),
          name: 'colorPicker',
          validateEvent: true,
          rules: [{
            required: true,
            message: 'Please select a color',
            trigger: 'change'
          }, ],
        }),
        new CEUpload({
          label: 'Upload',
          prop: 'upload',
          component: 'el-upload',
          action: 'https://jsonplaceholder.typicode.com/posts/',
          headers: {},
          multiple: false,
          data: {},
          // name: 'file',
          withCredentials: false,
          showFileList: true,
          fileList: [],
          autoUpload: true,
          accept: '',
          listType: 'text',
          disabled: false,
          limit: 3,
          slots: {
            slotName: 'default',
            slotHtml: `<el-button type="primary">点击上传</el-button>`,
            label: 'Button',
            prop: 'button',
            component: 'el-button',
            width: 100,
            type: 'primary',
            size: '',
            icon: '',
            nativeType: 'button',
            loading: false,
            disabled: false,
            plain: false,
            autofocus: false,
            round: false,
            circle: false,
            onClick: (event: Event) => console.log('button clicked', event),
            onFocus: () => console.log('button focused'),
            onBlur: () => console.log('button blurred'),
          },
          // beforeUpload: (file: File) => {
          //   console.log('before upload', file);
          //   return true;
          // },
          // onRemove: (file: object, fileList: object[]) => console.log('file removed', file, fileList),
          // onSuccess: (response: object, file: object, fileList: object[]) => console.log(
          //   'file uploaded successfully', response, file, fileList),
          // onError: (err: Error, file: object, fileList: object[]) => console.log('file upload error', err, file,
          //   fileList),
          // onChange: (file: object, fileList: object[]) => console.log('file changed', file, fileList),
          // onPreview: (file: object) => console.log('file previewed', file),
          // onFocus: () => console.log('upload focused'),
          // onBlur: () => console.log('upload blurred'),
          name: 'upload',
          rules: [{
            required: true,
            message: 'Please upload a file',
            trigger: 'change'
          }, ],
        }),
        new CETransfer({
          label: 'Transfer',
          prop: 'transfer',
          component: 'el-transfer',
          data: [{
              value: 1,
              label: '备选项1',
              disabled: false,
            },
            {
              value: 2,
              label: '备选项2',
              disabled: false,
            },
            {
              value: 3,
              label: '备选项3',
              disabled: false,
            },
          ],
          filterable: true,
          filterPlaceholder: 'Search',
          filterMethod: (query: string, item: any) => {
            return item.label.indexOf(query) > -1;
          },
          titles: ['Source', 'Target'],
          buttonTexts: ['', ''],
          format: {
            noChecked: '${total}',
            hasChecked: '${checked}/${total}',
          },
          // 'button-texts': ['To left', 'To right'],
          // 'render-content': (h, option) => {
          //   return h('span', null, option.label);
          // },
          // footerFormat: '{total} items',
          props: {
            label: 'label',
            key: 'value',
            disabled: 'disabled'
          },
          targetOrder: 'original',
          // selected: [],
          // onChange: (val: object[], direction: string, moveKeys: string[]) => {
          //   console.log(`transfer changed to: ${direction}, ${moveKeys}, ${val}`);
          // },
          // onFocus: () => console.log('transfer focused'),
          // onBlur: () => console.log('transfer blurred'),
          name: 'transfer',
          validateEvent: true,
          rules: [{
            required: true,
            message: 'Please select at least one item',
            trigger: 'change'
          }, ],
        }),



        new CEForm({
          label: 'Form',
          prop: 'form',
          component: 'el-form',
          // width: 600,
          model: {},
          rules: {},
          inline: false,
          labelPosition: 'right',
          labelWidth: '',
          labelSuffix: '',
          hideRequiredAsterisk: false,
          showMessage: true,
          // autocomplete: 'off',
          disabled: false,
          validateOnRuleChange: true,
          scrollToError: true,
          // onSubmit: (event: Event) => console.log('form submitted', event),
          // onFocus: () => console.log('form focused'),
          // onBlur: () => console.log('form blurred'),
          name: 'form',
        }),
        new CEFormItem({
          label: 'Form Item',
          prop: 'formItem',
          component: 'el-form-item',
          labelWidth: '',
          required: false,
          showMessage: true,
          inlineMessage: false,
          size: '',
          validateStatus: '',
          // labelPosition: 'right',
          // help: '',
          rules: [],
          error: '',
          // validateDisabled: false,
          // onFocus: () => console.log('form item focused'),
          // onBlur: () => console.log('form item blurred'),
          name: 'formItem',
        }),
        {
          label: 'Button',
          prop: 'button',
          component: 'el-button',
          width: 100,
          type: 'primary',
          size: '',
          icon: '',
          nativeType: 'button',
          loading: false,
          disabled: false,
          plain: false,
          autofocus: false,
          round: false,
          circle: false,
          onClick: (event: Event) => console.log('button clicked', event),
          onFocus: () => console.log('button focused'),
          onBlur: () => console.log('button blurred'),
          name: 'button',
        },
        // {
        //   label: 'Form Item Props',
        //   prop: 'formItemProps',
        //   component: 'el-form-item',
        //   width: 300,
        //   labelWidth: '',
        //   required: false,
        //   showMessage: true,
        //   inlineMessage: false,
        //   size: '',
        //   validateStatus: '',
        //   labelFor: '',
        //   labelPosition: 'right',
        //   help: '',
        //   rules: [],
        //   error: '',
        //   validateDisabled: false,
        //   onFocus: () => console.log('form item props focused'),
        //   onBlur: () => console.log('form item props blurred'),
        //   name: 'formItemProps',
        // },
        // {
        //   label: 'Form Rule',
        //   prop: 'formRule',
        //   component: 'el-form-item',
        //   width: 300,
        //   labelWidth: '',
        //   required: false,
        //   showMessage: true,
        //   inlineMessage: false,
        //   size: '',
        //   validateStatus: '',
        //   labelFor: '',
        //   labelPosition: 'right',
        //   help: '',
        //   validator: (rule: object, value: any, callback: any) => {
        //     console.log('form rule validator', rule, value, callback);
        //     callback();
        //   },
        //   trigger: 'change',
        //   message: '',
        //   validateFirst: false,
        //   onFocus: () => console.log('form rule focused'),
        //   onBlur: () => console.log('form rule blurred'),
        //   name: 'formRule',
        // },
        // {
        //   label: 'Range',
        //   prop: 'range',
        //   component: 'el-range',
        // },
        new CEFormImage({
          label: 'Image',
          prop: 'image',
          component: 'el-image',
          src: 'https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg',
          fit: 'contain',
          // alt: '',
          // referrerPolicy: '',
          lazy: false,
          // scrollContainer: null,
          previewSrcList: [],
          // zIndex: '',
          // onClick: (event: Event) => console.log('image clicked', event),
          // onLoad: () => console.log('image loaded'),
          // onError: () => console.log('image load error'),
          // onFocus: () => console.log('image focused'),
          // onBlur: () => console.log('image blurred'),
          name: 'image',
        }),
        // {
        //   label: 'Autocomplete',
        //   prop: 'autocomplete',
        //   component: 'el-autocomplete',
        //   width: 200,
        //   value: '',
        //   disabled: false,
        //   placeholder: '',
        //   clearable: false,
        //   popperClass: '',
        //   triggerOnFocus: true,
        //   name: 'autocomplete',
        //   fetchSuggestions: (query: string, callback: any) => {
        //     console.log('fetching suggestions', query, callback);
        //     callback([]);
        //   },
        //   onSelect: (val: any) => console.log('autocomplete selected: ', val),
        //   onChange: (val: any) => console.log('autocomplete changed to: ', val),
        //   onFocus: () => console.log('autocomplete focused'),
        //   onBlur: () => console.log('autocomplete blurred'),
        //   validateEvent: true,
        //   rules: [
        //     { required: true, message: 'Please enter a value', trigger: 'change' },
        //   ],
        // },
        // {
        //   label: 'Date Range Picker',
        //   prop: 'dateRangePicker',
        //   component: 'el-date-picker',
        //   width: 300,
        //   type: 'daterange',
        //   value: '',
        //   rangeSeparator: '-',
        //   startPlaceholder: 'Start Date',
        //   endPlaceholder: 'End Date',
        //   format: 'yyyy-MM-dd',
        //   readonly: false,
        //   disabled: false,
        //   editable: true,
        //   clearable: true,
        //   id: '',
        //   size: '',
        //   popperClass: '',
        //   pickerOptions: {},
        //   shortcuts: [],
        //   onChange: (val: any) => console.log('date range picker changed to: ', val),
        //   onFocus: () => console.log('date range picker focused'),
        //   onBlur: () => console.log('date range picker blurred'),
        //   name: 'dateRangePicker',
        //   validateEvent: true,
        //   rules: [
        //     { type: 'array', required: true, message: 'Please select a date range', trigger: 'change' },
        //   ],
        // },
        // {
        //   label: 'Time Select',
        //   prop: 'timeSelect',
        //   component: 'el-time-select',
        //   width: 200,
        //   value: '',
        //   readonly: false,
        //   disabled: false,
        //   editable: true,
        //   clearable: true,
        //   size: '',
        //   placeholder: '',
        //   format: 'HH:mm:ss',
        //   pickerOptions: {},
        //   rangeSeparator: '-',
        //   startPlaceholder: '',
        //   endPlaceholder: '',
        //   onChange: (val: any) => console.log('time select changed to: ', val),
        //   onFocus: () => console.log('time select focused'),
        //   onBlur: () => console.log('time select blurred'),
        //   name: 'timeSelect',
        //   validateEvent: true,
        //   rules: [
        //     { required: true, message: 'Please select a time', trigger: 'change' },
        //   ],
        // },
        // {
        //   label: 'Time Picker Panel',
        //   prop: 'timePickerPanel',
        //   component: 'el-time-picker-panel',
        //   width: 200,
        //   value: '',
        //   readonly: false,
        //   disabled: false,
        //   editable: true,
        //   clearable: true,
        //   size: '',
        //   placeholder: '',
        //   format: 'HH:mm:ss',
        //   pickerOptions: {},
        //   start: 'start',
        //   end: 'end',
        //   minTime: '',
        //   maxTime: '',
        //   selectableRange: '',
        //   onChange: (val: any) => console.log('time picker panel changed to: ', val),
        //   onFocus: () => console.log('time picker panel focused'),
        //   onBlur: () => console.log('time picker panel blurred'),
        //   name: 'timePickerPanel',
        //   validateEvent: true,
        //   rules: [
        //     { required: true, message: 'Please select a time', trigger: 'change' },
        //   ],
        // },
        // {
        //   label: 'Drawer',
        //   prop: 'drawer',
        //   component: 'el-drawer',
        //   width: 500,
        //   title: '',
        //   visible: false,
        //   size: '',
        //   direction: 'ltr',
        //   modal: true,
        //   closeOnPressEscape: true,
        //   closeOnClickModal: true,
        //   destroyOnClose: false,
        //   showClose: true,
        //   lockScroll: true,
        //   customClass: '',
        //   wrapperClosable: true,
        //   onClose: () => console.log('drawer closed'),
        //   onFocus: () => console.log('drawer focused'),
        //   onBlur: () => console.log('drawer blurred'),
        //   name: 'drawer',
        // },
        // {
        //   label: 'Dropdown',
        //   prop: 'dropdown',
        //   component: 'el-dropdown',
        //   width: 200,
        //   trigger: 'hover',
        //   splitButton: false,
        //   type: '',
        //   size: '',
        //   placement: '',
        //   hideOnClick: true,
        //   showTimeout: 250,
        //   hideTimeout: 150,
        //   tabindex: '',
        //   disabled: false,
        //   visibleArrow: true,
        //   onClick: (event: Event) => console.log('dropdown clicked', event),
        //   onCommand: (command: string) => console.log('dropdown command executed', command),
        //   onFocus: () => console.log('dropdown focused'),
        //   onBlur: () => console.log('dropdown blurred'),
        //   name: 'dropdown',
        // },
        // {
        //   label: 'Dropdown Item',
        //   prop: 'dropdownItem',
        //   component: 'el-dropdown-item',
        //   width: 100,
        //   command: '',
        //   disabled: false,
        //   divided: false,
        //   onClick: (event: Event) => console.log('dropdown item clicked', event),
        //   onFocus: () => console.log('dropdown item focused'),
        //   onBlur: () => console.log('dropdown item blurred'),
        //   name: 'dropdownItem',
        // },
        // {
        //   label: 'Steps',
        //   prop: 'steps',
        //   component: 'el-steps',
        //   width: 400,
        //   space: 100,
        //   active: 0,
        //   direction: 'horizontal',
        //   finishStatus: 'finish',
        //   processStatus: '',
        //   alignCenter: true,
        //   simple: false,
        //   onStepChange: (activeIndex: number) => console.log('step changed to:', activeIndex),
        //   onFocus: () => console.log('steps focused'),
        //   onBlur: () => console.log('steps blurred'),
        //   name: 'steps',
        // },
        // {
        //   label: 'Step',
        //   prop: 'step',
        //   component: 'el-step',
        //   width: 100,
        //   title: '',
        //   icon: '',
        //   description: '',
        //   status: '',
        //   direction: '',
        //   onClick: () => console.log('step clicked'),
        //   onFocus: () => console.log('step focused'),
        //   onBlur: () => console.log('step blurred'),
        //   name: 'step',
        // },
        // {
        //   label: 'Divider',
        //   prop: 'divider',
        //   component: 'el-divider',
        //   width: 100,
        //   contentPosition: 'center',
        //   orientation: 'horizontal',
        //   dashed: false,
        //   onClick: () => console.log('divider clicked'),
        //   onFocus: () => console.log('divider focused'),
        //   onBlur: () => console.log('divider blurred'),
        //   name: 'divider',
        // },
        // {
        //   label: 'Table',
        //   prop: 'table',
        //   component: 'el-table',
        //   width: 500,
        //   data: [],
        //   height: '',
        //   maxHeight: '',
        //   stripe: false,
        //   border: false,
        //   fit: true,
        //   showHeader: true,
        //   highlightCurrentRow: false,
        //   currentRowKey: '',
        //   rowClassName: () => '',
        //   emptyText: 'No Data',
        //   defaultExpandAll: false,
        //   expandRowKeys: [],
        //   rowKey: '',
        //   rowSelection: false,
        //   selectOnIndeterminate: false,
        //   onSelect: (selection: any, row: any) => console.log('table row selected', selection, row),
        //   onSelectAll: (selection: any) => console.log('table all rows selected', selection),
        //   onSelectionChange: (selection: any) => console.log('table selection changed', selection),
        //   onCurrentChange: (currentRow: any, oldCurrentRow: any) => console.log('table current row changed', currentRow, oldCurrentRow),
        //   onSortChange: (sort: any) => console.log('table sort changed', sort),
        //   onFilterChange: (filters: any) => console.log('table filter changed', filters),
        //   onExpand: (row: any, expanded: any) => console.log('table row expanded/collapsed', row, expanded),
        //   onLoad: (data: any) => console.log('table data loaded', data),
        //   onError: (error: any) => console.log('table error occurred', error),
        //   onFocus: () => console.log('table focused'),
        //   onBlur: () => console.log('table blurred'),
        //   name: 'table',
        // },
        // {
        //   label: 'Table Column',
        //   prop: 'tableColumn',
        //   component: 'el-table-column',
        //   width: '',
        //   minWidth: '',
        //   fixed: false,
        //   renderHeader: () => '',
        //   sortable: false,
        //   sortBy: '',
        //   // sortMethod: (a: any, b: any) => 0,
        //   resizable: true,
        //   columnKey: '',
        //   align: 'left',
        //   headerAlign: '',
        //   showTooltipWhenOverflow: false,
        //   showOverflowTooltip: false,
        //   className: '',
        //   labelClassName: '',
        //   // selectable: (row: any, index: number) => true,
        //   filters: [],
        //   filterPlacement: '',
        //   filterMultiple: true,
        //   // filterMethod: (value: any, row: any, column: any) => true,
        //   filteredValue: [],
        //   filterIcon: '',
        //   filterResetIcon: '',
        //   filterable: false,
        //   // formatter: (row: any, column: any, cellValue: any, index: number) => '',
        //   index: '',
        //   scopedSlots: {},
        //   onClick: () => console.log('table column clicked'),
        //   onFocus: () => console.log('table column focused'),
        //   onBlur: () => console.log('table column blurred'),
        //   name: 'tableColumn',
        // },
        // {
        //   label: 'Breadcrumb',
        //   prop: 'breadcrumb',
        //   component: 'el-breadcrumb',
        //   separator: '/',
        //   separatorClass: '',
        //   separatorStyle: {},
        //   itemClass: '',
        //   itemStyle: {},
        //   lastNodeClass: '',
        //   lastNodeStyle: {},
        //   onClick: (event: Event) => console.log('breadcrumb item clicked', event),
        //   onFocus: () => console.log('breadcrumb focused'),
        //   onBlur: () => console.log('breadcrumb blurred'),
        //   name: 'breadcrumb',
        // },
        // {
        //   label: 'Breadcrumb Item', prop: 'breadcrumbItem',
        //   component: 'el-breadcrumb-item',
        //   to: '',
        //   replace: false,
        //   target: '',
        //   onClick: (event: Event) => console.log('breadcrumb item clicked', event),
        //   onFocus: () => console.log('breadcrumb item focused'),
        //   onBlur: () => console.log('breadcrumb item blurred'),
        //   name: 'breadcrumbItem',
        // },
        // {
        //   label: 'Menu',
        //   prop: 'menu',
        //   component: 'el-menu',
        //   mode: '',
        //   collapse: false,
        //   backgroundColor: '',
        //   textColor: '',
        //   activeTextColor: '',
        //   defaultActive: '',
        //   defaultOpeneds: [],
        //   uniqueOpened: false,
        //   menuTrigger: '',
        //   router: false,
        //   items: [],
        //   onSelect: (index: string, indexPath: string[]) => console.log('menu item selected', index, indexPath),
        //   onOpen: (index: string, indexPath: string[]) => console.log('submenu opened', index, indexPath),
        //   onClose: (index: string, indexPath: string[]) => console.log('submenu closed', index, indexPath),
        //   onFocus: () => console.log('menu focused'),
        //   onBlur: () => console.log('menu blurred'),
        //   name: 'menu',
        // },
        // {
        //   label: 'Submenu',
        //   prop: 'submenu',
        //   component: 'el-submenu',
        //   index: '',
        //   showTimeout: 300,
        //   hideTimeout: 300,
        //   popperClass: '',
        //   disabled: false,
        //   onOpen: (index: string, indexPath: string[]) => console.log('submenu opened', index, indexPath),
        //   onClose: (index: string, indexPath: string[]) => console.log('submenu closed', index, indexPath),
        //   onFocus: () => console.log('submenu focused'),
        //   onBlur: () => console.log('submenu blurred'),
        //   name: 'submenu',
        // },
        // {
        //   label: 'Menu Item',
        //   prop: 'menuItem',
        //   component: 'el-menu-item',
        //   index: '',
        //   route: '',
        //   disabled: false,
        //   icon: '',
        //   command: '',
        //   onClick: (event: Event) => console.log('menu item clicked', event),
        //   onFocus: () => console.log('menu item focused'),
        //   onBlur: () => console.log('menu item blurred'),
        //   name: 'menuItem',
        // },
        // {
        //   label: 'Menu Item Group',
        //   prop: 'menuItemGroup',
        //   component: 'el-menu-item-group',
        //   title: '',
        //   onClick: (event: Event) => console.log('menu item group clicked', event),
        //   onFocus: () => console.log('menu item group focused'),
        //   onBlur: () => console.log('menu item group blurred'),
        //   name: 'menuItemGroup',
        // },
        // {
        //   label: 'Tabs',
        //   prop: 'tabs',
        //   component: 'el-tabs',
        //   type: 'border-card',
        //   tabPosition: 'top',
        //   stretch: false,
        //   closable: false,
        //   addable: false,
        //   editable: false,
        //   value: '',
        //   onTabClick: (tab: any, event: Event) => console.log('tab clicked', tab, event),
        //   onTabRemove: (tab: any, event: Event) => console.log('tab removed', tab, event),
        //   onFocus: () => console.log('tabs focused'),
        //   onBlur: () => console.log('tabs blurred'),
        //   name: 'tabs',
        // },
        // {
        //   label: 'Tab Pane',
        //   prop: 'tabPane',
        //   component: 'el-tab-pane',
        //   closable: false,
        //   disabled: false,
        //   lazy: false,
        //   onActivate: (tab: any) => console.log('tab pane activated', tab),
        //   onDeactivate: (tab: any) => console.log('tab pane deactivated', tab),
        //   onFocus: () => console.log('tab pane focused'),
        //   onBlur: () => console.log('tab pane blurred'),
        //   name: 'tabPane',
        // },
        // {
        //   label: 'Tree',
        //   prop: 'tree',
        //   component: 'el-tree',
        //   data: [],
        //   emptyText: 'No Data',
        //   nodeKey: 'id',
        //   checkStrictly: false,
        //   defaultCheckedKeys: [],
        //   defaultExpandedKeys: [],
        //   defaultProps: {},
        //   renderContent: () => { 
        //     console.log(1)
        //   },
        //   highlightCurrent: false,
        //   currentKey: '',
        //   defaultExpandAll: false,
        //   expandOnClickNode: true,
        //   checkOnClickNode: false,
        //   autoExpandParent: true,
        //   draggable: false,
        //   allowDrop: () => true,
        //   filterNodeMethod: () => true,
        //   load: () => { 
        //     console.log(1)
        //   },
        //   renderAfterExpand: true,
        //   onNodeClick: (node: any, component: any, event: Event) => console.log('tree node clicked', node, component, event),
        //   onCheckChange: (checkedNodes: any, checkedKeys: any, halfCheckedNodes: any) => console.log('tree checked nodes changed', checkedNodes, checkedKeys, halfCheckedNodes),
        //   onCurrentChange: (currentNode: any, oldCurrentNode: any) => console.log('tree current node changed', currentNode, oldCurrentNode),
        //   onNodeExpand: (node: any, component: any) => console.log('tree node expanded', node, component),
        //   onNodeCollapse: (node: any, component: any) => console.log('tree node collapsed', node, component),
        //   onNodeDragStart: (event: Event, node: any) => console.log('tree node drag started', event, node),
        //   onNodeDragEnter: (event: Event, node: any, targetNode: any) => console.log('tree node drag entered', event, node, targetNode),
        //   onNodeDragLeave: (event: Event, node: any, targetNode: any) => console.log('tree node drag left', event, node, targetNode),
        //   onNodeDragOver: (event: Event, node: any, targetNode: any) => console.log('tree node drag over', event, node, targetNode),
        //   onNodeDragEnd: (event: Event, node: any) => console.log('tree node drag ended', event, node),
        //   onNodeDrop: (event: Event, node: any, targetNode: any, moveType: any, component: any) => console.log('tree node dropped', event, node, targetNode, moveType, component),
        //   onFocus: () => console.log('tree focused'),
        //   onBlur: () => console.log('tree blurred'),
        //   name: 'tree',
        // },
        // {
        //   label: 'Pagination',
        //   prop: 'pagination',
        //   component: 'el-pagination',
        //   small: false,
        //   pageSize: 10,
        //   total: 0,
        //   pageCount: 0,
        //   currentPage: 1,
        //   layout: '',
        //   pageSizes: [],
        //   popperClass: '',
        //   prevText: '',
        //   nextText: '',
        //   background: false,
        //   disabled: false,
        //   hideOnSinglePage: false,
        //   onSizeChange: (pageSize: number) => console.log('pagination page size changed', pageSize),
        //   onCurrentChange: (currentPage: number) => console.log('pagination current page changed', currentPage),
        //   onPageChange: (page: number) => console.log('pagination page changed', page),
        //   onFocus: () => console.log('pagination focused'),
        //   onBlur: () => console.log('pagination blurred'),
        //   name: 'pagination',
        // },
        // {
        //   label: 'Dialog',
        //   prop: 'dialog',
        //   component: 'el-dialog',
        //   title: '',
        //   visible: false,
        //   width: '50%',
        //   top: '15vh',
        //   modal: true,
        //   lockScroll: true,
        //   closeOnClickModal: true,
        //   closeOnPressEscape: true,
        //   showClose: true,
        //   beforeClose: (done: any) => done(),
        //   center: false,
        //   destroyOnClose: false,
        //   appendToBody: false,
        //   zIndex: 2000,
        //   customClass: '',
        //   modalClass: '',
        //   onClose: () => console.log('dialog closed'),
        //   onOpen: () => console.log('dialog opened'),
        //   onFocus: () => console.log('dialog focused'),
        //   onBlur: () => console.log('dialog blurred'),
        //   name: 'dialog',
        // },
        // {
        //   label: 'Autocomplete',
        //   prop: 'autocomplete',
        //   component: 'el-autocomplete',
        //   value: '',
        //   popperClass: '',
        //   placeholder: '',
        //   clearable: false,
        //   disabled: false,
        //   debounce: 300,
        //   fetchSuggestions: (query: string, callback: any) => {
        //     console.log(query, callback);
        //   },
        //   triggerOnFocus: true,
        //   appendToBody: false,
        //   selectWhenUnmatched: false,
        //   hideLoading: false,
        //   popperAppendToBody: true,
        //   popperOptions: {},
        //   onInput: (value: string) => console.log('autocomplete input changed', value),
        //   onSelect: (value: any) => console.log('autocomplete value selected', value),
        //   onFocus: () => console.log('autocomplete focused'),
        //   onBlur: () => console.log('autocomplete blurred'),
        //   name: 'autocomplete',
        // },
        // {
        //   label: 'Dropdown',
        //   prop: 'dropdown',
        //   component: 'el-dropdown',
        //   trigger: '',
        //   type: '',
        //   splitButton: false,
        //   hideOnClick: true,
        //   placement: '',
        //   visibleArrow: true,
        //   showTimeout: 250,
        //   hideTimeout: 150,
        //   tabindex: '',
        //   onClick: (command: any, instance: any) => console.log('dropdown clicked', command, instance),
        //   onCommand: (command: any, instance: any) => console.log('dropdown command executed', command, instance),
        //   onFocus: () => console.log('dropdown focused'),
        //   onBlur: () => console.log('dropdown blurred'),
        //   name: 'dropdown',
        // },
        // {
        //   label: 'Dropdown Item',
        //   prop: 'dropdownItem',
        //   component: 'el-dropdown-item',
        //   command: '',
        //   disabled: false,
        //   divided: false,
        //   onClick: (event: Event) => console.log('dropdown item clicked', event),
        //   onFocus: () => console.log('dropdown item focused'),
        //   onBlur: () => console.log('dropdown item blurred'),
        //   name: 'dropdownItem',
        // },
        // {
        //   label: 'Dropdown Menu',
        //   prop: 'dropdownMenu',
        //   component: 'el-dropdown-menu',
        //   command: '',
        //   disabled: false,
        //   divided: false,
        //   onClick: (event: Event) => console.log('dropdown menu clicked', event),
        //   onFocus: () => console.log('dropdown menu focused'),
        //   onBlur: () => console.log('dropdown menu blurred'),
        //   name: 'dropdownMenu',
        // },
        // {
        //   label: 'Steps',
        //   prop: 'steps',
        //   component: 'el-steps',
        //   space: 100,
        //   active: 0,
        //   direction: 'horizontal',
        //   alignCenter: false,
        //   simple: false,
        //   finishStatus: 'finish',
        //   processStatus: 'process',
        //   showError: true,
        //   status: '',
        //   clickable: true,
        //   onStepClick: (index: number, active: number) => console.log('step clicked', index, active),
        //   onFocus: () => console.log('steps focused'),
        //   onBlur: () => console.log('steps blurred'),
        //   name: 'steps',
        // },
        // {
        //   label: 'Step',
        //   prop: 'step',
        //   component: 'el-step',
        //   title: '',
        //   icon: '',
        //   description: '',
        //   status: '',
        //   direction: '',
        //   onClick: () => console.log('step clicked'),
        //   onFocus: () => console.log('step focused'),
        //   onBlur: () => console.log('step blurred'),
        //   name: 'step',
        // },
        // {
        //   label: 'Scrollbar',
        //   prop: 'scrollbar',
        //   component: 'el-scrollbar',
        //   native: false,
        //   wrapStyle: {},
        //   wrapClass: '',
        //   viewClass: '',
        //   viewStyle: {},
        //   noresize: false,
        //   tag: 'div',
        //   onFocus: () => console.log('scrollbar focused'),
        //   onBlur: () => console.log('scrollbar blurred'),
        //   name: 'scrollbar',
        // },
        // {
        //   label: 'Popover',
        //   prop: 'popover',
        //   component: 'el-popover',
        //   value: false,
        //   placement: 'bottom',
        //   trigger: 'click',
        //   title: '',
        //   width: '',
        //   content: '',
        //   disabled: false,
        //   offset: 0,
        //   transition: '',
        //   visibleArrow: true,
        //   popperClass: '',
        //   enterable: true,
        //   hideAfter: 200,
        //   tabindex: '',
        //   popperOptions: {},
        //   openDelay: 0,
        //   closeDelay: 200,
        //   onShow: () => console.log('popover shown'),
        //   onHide: () => console.log('popover hidden'),
        //   onFocus: () => console.log('popover focused'),
        //   onBlur: () => console.log('popover blurred'),
        //   name: 'popover',
        // },
        // {
        //   label: 'Tooltip',
        //   prop: 'tooltip',
        //   component: 'el-tooltip',
        //   value: false,
        //   content: '',
        //   placement: 'bottom',
        //   disabled: false,
        //   effect: 'dark',
        //   transition: '',
        //   visibleArrow: true,
        //   popperClass: '',
        //   openDelay: 0,
        //   manual: false,
        //   popperOptions: {},
        //   enterable: true,
        //   hideAfter: 200,
        //   tabindex: '',
        //   onShow: () => console.log('tooltip shown'),
        //   onHide: () => console.log('tooltip hidden'),
        //   onFocus: () => console.log('tooltip focused'),
        //   onBlur: () => console.log('tooltip blurred'),
        //   name: 'tooltip',
        // },
        // {
        //   label: 'Carousel',
        //   prop: 'carousel',
        //   component: 'el-carousel',
        //   height: '',
        //   initialIndex: 0,
        //   trigger: 'click',
        //   autoplay: false,
        //   interval: 3000,
        //   indicatorPosition: 'bottom',
        //   indicator: 'inside',
        //   arrow: 'hover',
        //   type: 'card',
        //   loop: true,
        //   direction: 'horizontal',
        //   onInit: () => console.log('carousel initialized'),
        //   onChange: (index: number) => console.log('carousel changed', index),
        //   onFocus: () => console.log('carousel focused'),
        //   onBlur: () => console.log('carousel blurred'),
        //   name: 'carousel',
        // },

        // {
        //   label: 'Carousel Item',
        //   prop: 'carouselItem',
        //   component: 'el-carousel-item',
        //   onClick: () => console.log('carousel item clicked'),
        //   onFocus: () => console.log('carousel item focused'),
        //   onBlur: () => console.log('carousel item blurred'),
        //   name: 'carouselItem',
        // }




      ]);
      const formData = reactive({});
      const rules = {
        'input': [{
          required: true,
          message: '请输入内容',
          trigger: 'blur'
        }, {
          pattern: /^[A-Za-z0-9\u4e00-\u9fa5]+$/,
          message: '不允许输入空格等特殊符号'
        }]
      };

      return {
        formItems,
        formData,
        rules,
        submit,
        form
      };
    }
  });
</script>



 * 
 * 
 */